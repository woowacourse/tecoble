{"version":3,"file":"component---src-templates-tags-tsx-9f42085b0817aae400a6.js","mappings":"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","sources":["webpack://Tecoble/./src/templates/tags.tsx"],"sourcesContent":["import { graphql } from 'gatsby';\nimport React from 'react';\nimport { getSrc } from 'gatsby-plugin-image';\n\nimport { Footer } from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n  SiteNavMain,\n  SiteArchiveHeader,\n  ResponsiveHeaderBackground,\n  SiteHeaderBackground,\n} from '../styles/shared';\nimport type { PageContext } from './post';\nimport { Helmet } from 'react-helmet';\nimport config from '../website-config';\n\ntype TagTemplateProps = {\n  location: Location;\n  pageContext: {\n    tag: string;\n  };\n  data: {\n    allTagYaml: {\n      edges: Array<{\n        node: {\n          yamlId: string;\n          description: string;\n          image?: any;\n        };\n      }>;\n    };\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n};\n\nfunction Tags({ pageContext, data, location }: TagTemplateProps) {\n  const tag = pageContext.tag ? pageContext.tag : '';\n  const { edges, totalCount } = data.allMarkdownRemark;\n  const tagData = data.allTagYaml.edges.find(\n    n => n.node.yamlId.toLowerCase() === tag.toLowerCase(),\n  );\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>\n          {tag} - {config.title}\n        </title>\n        <meta name=\"description\" content={tagData?.node ? tagData.node.description : ''} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={`${tag} - ${config.title}`} />\n        <meta property=\"og:url\" content={config.siteUrl + location.pathname} />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={`${tag} - ${config.title}`} />\n        <meta name=\"twitter:url\" content={config.siteUrl + location.pathname} />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n      </Helmet>\n      <Wrapper>\n        <header className=\"site-archive-header\" css={[SiteHeader, SiteArchiveHeader]}>\n          <div css={[outer, SiteNavMain]}>\n            <div css={inner}>\n              <SiteNav isHome={false} />\n            </div>\n          </div>\n          <ResponsiveHeaderBackground\n            css={[outer, SiteHeaderBackground]}\n            backgroundImage={getSrc(tagData?.node?.image)}\n            className=\"site-header-background\"\n          >\n            <SiteHeaderContent css={inner} className=\"site-header-content\">\n              <SiteTitle className=\"site-title\">{`#${tag.toUpperCase()}`}</SiteTitle>\n              <SiteDescription className=\"site-description\">\n                {tagData?.node.description ? (\n                  tagData.node.description\n                ) : (\n                  <>\n                    A collection of {totalCount > 1 && `${totalCount} posts`}\n                    {totalCount === 1 && '1 post'}\n                    {totalCount === 0 && 'No posts'}\n                  </>\n                )}\n              </SiteDescription>\n            </SiteHeaderContent>\n          </ResponsiveHeaderBackground>\n        </header>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            <div css={[PostFeed]}>\n              {edges.map(({ node }) => (\n                <PostCard key={node.fields.slug} post={node} />\n              ))}\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n}\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query ($tag: String) {\n    allTagYaml {\n      edges {\n        node {\n          yamlId\n          description\n          image {\n            childImageSharp {\n              gatsbyImageData(layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { tags: { in: [$tag] }, draft: { ne: true } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(truncate: true)\n          timeToRead\n          frontmatter {\n            title\n            excerpt\n            tags\n            date\n            image {\n              childImageSharp {\n                gatsbyImageData(layout: FULL_WIDTH)\n              }\n            }\n            author {\n              name\n              bio\n              avatar {\n                childImageSharp {\n                  gatsbyImageData(layout: FULL_WIDTH, breakpoints: [40, 80, 120])\n                }\n              }\n            }\n          }\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["pageContext","data","location","_tagData$node","tag","edges","totalCount","allMarkdownRemark","tagData","allTagYaml","find","n","node","yamlId","toLowerCase","___EmotionJSX","IndexLayout","Helmet","lang","config","title","name","content","description","property","siteUrl","pathname","facebook","twitter","split","Wrapper","className","css","SiteHeader","SiteArchiveHeader","outer","SiteNavMain","inner","SiteNav","isHome","ResponsiveHeaderBackground","SiteHeaderBackground","backgroundImage","getSrc","image","SiteHeaderContent","SiteTitle","toUpperCase","SiteDescription","React","id","SiteMain","PostFeed","map","PostCard","key","fields","slug","post","Footer"],"sourceRoot":""}