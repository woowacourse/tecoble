{"version":3,"sources":["webpack:///./src/components/Footer.tsx","webpack:///./src/components/header/SiteNavBackground.tsx","webpack:///./src/components/Pagination.tsx","webpack:///./src/components/icons/ArrowDown.tsx","webpack:///./src/components/icons/ArrowUp.tsx","webpack:///./src/components/TagNav.tsx","webpack:///./src/templates/index.tsx"],"names":["Footer","css","outer","SiteFooter","inner","SiteFooterContent","className","to","config","title","Date","getFullYear","footer","SiteFooterNav","facebook","href","target","rel","twitter","setLightness","colors","darkgrey","styled","nav","backgroundImage","SiteNavBackground","children","edges","useStaticQuery","allImage","useState","imageUrls","setImageUrls","useEffect","urls","map","edge","node","childImageSharp","fixed","src","intervalId","window","setInterval","firstImageUrl","restImageUrls","clearInterval","SiteHeader","SiteHeaderStyles","url","key","navCss","darken","Pagination","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","String","fromCharCode","Array","from","length","_","i","ArrowDown","size","xmlns","height","viewBox","width","fill","d","opacity","ArrowUp","wide","narrow","TagNavWrapper","div","isWideView","midgrey","TagNav","allMarkdownRemark","tags","setTags","setIsWideView","tagNameMap","forEach","frontmatter","tag","tagName","count","name","sortedTags","Object","values","sort","aTagName","bTagName","toUpperCase","type","onClick","pageQuery","HomePosts","IndexPage","props","data","header","Helmet","lang","content","description","property","siteUrl","googleSiteVerification","split","Wrapper","SiteNav","isHome","logo","style","maxHeight","alt","id","SiteMain","Posts","PostFeed","post","index","draft","PostCard","fields","slug","large","pageContext"],"mappings":"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","file":"component---src-templates-index-tsx-ead65a5aeec7d773bee7.js","sourcesContent":["import { Link } from 'gatsby';\nimport { setLightness } from 'polished';\nimport React from 'react';\nimport styled from '@emotion/styled';\nimport { css } from '@emotion/react';\n\nimport { colors } from '../styles/colors';\nimport { outer, inner } from '../styles/shared';\nimport config from '../website-config';\n\nexport const Footer: React.FC = () => {\n  return (\n    <footer css={[outer, SiteFooter]}>\n      <div css={[inner, SiteFooterContent]}>\n        <section className=\"copyright\">\n          <Link to=\"/\">{config.title}</Link> &copy; {new Date().getFullYear()}{' '}\n          {config.footer && (\n            <Link to=\"/\">\n              | {config.title} {config.footer}\n            </Link>\n          )}\n        </section>\n        <SiteFooterNav>\n          <Link to=\"/\">Latest Posts</Link>\n          {config.facebook && (\n            <a href={config.facebook} target=\"_blank\" rel=\"noopener noreferrer\">\n              Facebook\n            </a>\n          )}\n          {config.twitter && (\n            <a href={config.twitter} target=\"_blank\" rel=\"noopener noreferrer\">\n              Twitter\n            </a>\n          )}\n\n          <a href=\"https://github.com/scttcper/gatsby-casper\" target=\"_blank\" rel=\"noopener noreferrer\">\n            Casper\n          </a>\n\n          <a href=\"/rss.xml\">RSS</a>\n        </SiteFooterNav>\n      </div>\n    </footer>\n  );\n};\n\nconst SiteFooter = css`\n  position: relative;\n  padding-top: 20px;\n  padding-bottom: 60px;\n  color: #fff;\n  background: ${setLightness('0.0015', colors.darkgrey)};\n`;\n\nconst SiteFooterContent = css`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: center;\n  color: rgba(255, 255, 255, 0.7);\n  font-size: 1.3rem;\n  a {\n    color: rgba(255, 255, 255, 0.7);\n  }\n  a:hover {\n    color: rgba(255, 255, 255, 1);\n    text-decoration: none;\n  }\n  @media (max-width: 650px) {\n    flex-direction: column;\n  }\n`;\n\nconst SiteFooterNav = styled.nav`\n  display: flex;\n\n  a {\n    position: relative;\n    margin-left: 20px;\n  }\n\n  a:before {\n    content: '';\n    position: absolute;\n    top: 11px;\n    left: -11px;\n    display: block;\n    width: 2px;\n    height: 2px;\n    background: #fff;\n    border-radius: 100%;\n  }\n\n  a:first-of-type:before {\n    display: none;\n  }\n  @media (max-width: 650px) {\n    a:first-of-type {\n      margin-left: 0;\n    }\n  }\n`;\n\n","import { css } from '@emotion/react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport { FixedObject } from 'gatsby-image';\nimport React, { ReactNode, useEffect, useState } from 'react';\nimport { outer, SiteHeader, SiteHeaderStyles } from '../../styles/shared';\n\ninterface SiteNavBackgroundProps {\n  children: ReactNode;\n}\n\ninterface SiteNavBackgroundQuery {\n  allImage: {\n    edges: Array<{\n      node: {\n        childImageSharp: {\n          fixed: FixedObject;\n        };\n      };\n    }>;\n  };\n}\n\nconst SiteNavBackground: React.FC<SiteNavBackgroundProps> = ({ children }) => {\n  const IMAGE_REMAINING_DURATION = 4000;\n  const {\n    allImage: { edges },\n  } = useStaticQuery<SiteNavBackgroundQuery>(graphql`\n    query navBackgroundQuery {\n      allImage: allFile(filter: { relativePath: { regex: \"/img/nav-background[0-9]+/i\" } }) {\n        edges {\n          node {\n            childImageSharp {\n              fixed(width: 2000, quality: 100) {\n                src\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n  const [imageUrls, setImageUrls] = useState<string[]>([]);\n\n  useEffect(() => {\n    const urls = edges.map(edge => edge.node.childImageSharp.fixed.src);\n\n    setImageUrls(urls);\n  }, [edges]);\n\n  useEffect(() => {\n    const intervalId = window.setInterval(() => {\n      const [firstImageUrl, ...restImageUrls] = imageUrls;\n\n      setImageUrls([...restImageUrls, firstImageUrl]);\n    }, IMAGE_REMAINING_DURATION);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [imageUrls]);\n\n  return (\n    <div css={[outer, SiteHeader, SiteHeaderStyles]} className=\"site-header-background\">\n      <div css={[backgroundImage]}>\n        {imageUrls.map(url => (\n          <div\n            key={url}\n            className=\"nav-background-image\"\n            css={css`\n              background-image: url(${url});\n            `}\n          />\n        ))}\n      </div>\n      {children}\n    </div>\n  );\n};\n\nconst backgroundImage = css`\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n\n  & > .nav-background-image {\n    transition: opacity 0.5s ease-in-out;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background-size: cover;\n    background-position: center;\n  }\n\n  & > .nav-background-image:first-child {\n    opacity: 1;\n  }\n\n  & > .nav-background-image:last-child {\n    opacity: 0;\n  }\n`;\n\nexport default SiteNavBackground;\n","import { Link } from 'gatsby';\nimport React from 'react';\nimport { darken } from 'polished';\nimport { css } from '@emotion/react';\n\nimport { colors } from '../styles/colors';\n\nexport interface PaginationProps {\n  currentPage: number;\n  numPages: number;\n}\n\nconst Pagination: React.FunctionComponent<PaginationProps> = ({ currentPage, numPages }) => {\n  const isFirst = currentPage === 1;\n  const isLast = currentPage === numPages;\n  const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString();\n  const nextPage = (currentPage + 1).toString();\n\n  return (\n    <nav css={navCss}>\n      <div>\n        {!isFirst && (\n          <Link to={prevPage} rel=\"prev\">\n            {/* << symbol */}\n            {String.fromCharCode(171)}\n          </Link>\n        )}\n\n        {Array.from({ length: numPages }, (_, i) => (\n          <Link key={`pagination-number${i + 1}`} className={i + 1 === currentPage ? 'active' : ''} to={`/${i === 0 ? '' : i + 1}`}>\n            {i + 1}\n          </Link>\n        ))}\n\n        {!isLast && (\n          <Link to={nextPage} rel=\"next\">\n            {/* >> symbol */}\n            {String.fromCharCode(187)}\n          </Link>\n        )}\n      </div>\n    </nav>\n  );\n};\n\nconst navCss = css`\n  text-align: center;\n  div {\n    display: inline-block;\n  }\n\n  a {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell;\n    background: #fff;\n    color: black;\n    float: left;\n    padding: 8px 16px;\n    text-decoration: none;\n    transition: background-color .3s;\n    border: 1px solid #ddd;\n    margin: 0 4px;\n    box-shadow: rgba(39, 44, 49, 0.06) 8px 14px 38px, rgba(39, 44, 49, 0.03) 1px 3px 8px;\n    border-radius: 6px;\n    margin-bottom: 5px;\n    min-width: 50px;\n\n    &.active {\n      -webkit-box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n      -moz-box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n      box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n    }\n\n    &:hover:not(.active) {\n      background-color: #ddd;\n    }\n\n    &:hover {\n      text-decoration: none;\n    }\n  }\n`;\n\nexport default Pagination;\n","import React, { VFC } from 'react';\n\ninterface Props {\n  size?: string;\n}\n\nconst ArrowDown: VFC<Props> = ({ size = '18px' }) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height={size}\n      viewBox=\"0 0 24 24\"\n      width={size}\n      fill=\"#000000\"\n    >\n      <path d=\"M24 24H0V0h24v24z\" fill=\"none\" opacity=\".87\" />\n      <path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6-1.41-1.41z\" />\n    </svg>\n  );\n};\n\nexport default ArrowDown;\n","import React from 'react';\n\ninterface Props {\n  size?: string;\n}\n\nconst ArrowUp: VFC<Props> = ({ size = '18px' }) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height={size}\n      viewBox=\"0 0 24 24\"\n      width={size}\n      fill=\"#000000\"\n    >\n      <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n      <path d=\"M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14l-6-6z\" />\n    </svg>\n  );\n};\n\nexport default ArrowUp;\n","import { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { graphql, Link, useStaticQuery } from 'gatsby';\nimport _ from 'lodash';\nimport React, { useEffect, useState, VFC } from 'react';\nimport { colors } from '../styles/colors';\nimport { inner } from '../styles/shared';\nimport ArrowDown from './icons/ArrowDown';\nimport ArrowUp from './icons/ArrowUp';\n\ninterface TagNavQuery {\n  allMarkdownRemark: {\n    edges: Array<{\n      node: {\n        frontmatter: {\n          tags: string[];\n        };\n      };\n    }>;\n  };\n}\n\ninterface Tag {\n  name: string;\n  count: number;\n}\n\ninterface Props {\n  className?: string;\n}\n\nconst TagNav: VFC<Props> = ({ className }) => {\n  const {\n    allMarkdownRemark: { edges },\n  } = useStaticQuery<TagNavQuery>(graphql`\n    query TagNavQuery {\n      allMarkdownRemark {\n        edges {\n          node {\n            frontmatter {\n              tags\n            }\n          }\n        }\n      }\n    }\n  `);\n  const [tags, setTags] = useState<Tag[]>([]);\n  const [isWideView, setIsWideView] = useState(false);\n\n  useEffect(() => {\n    if (!edges) {\n      return;\n    }\n\n    const tagNameMap: Record<string, Tag> = {};\n\n    edges.forEach(edge => {\n      edge.node.frontmatter.tags.forEach(tag => {\n        const tagName = _.kebabCase(tag);\n\n        if (!tagNameMap[tagName]) {\n          tagNameMap[tagName] = {\n            name: tagName,\n            count: 1,\n          };\n          return;\n        }\n\n        tagNameMap[tagName].count += 1;\n      });\n    });\n\n    const sortedTags = Object.values(tagNameMap).sort(({ name: aTagName }, { name: bTagName }) => {\n      return aTagName.toUpperCase() >= bTagName.toUpperCase() ? 1 : -1;\n    });\n\n    setTags(sortedTags);\n  }, []);\n\n  return (\n    <TagNavWrapper className={className} isWideView={isWideView}>\n      <ul>\n        {tags.map(tag => (\n          <li key={tag.name}>\n            <Link to={`/tags/${tag.name}`}>{`#${tag.name} (${tag.count})`}</Link>\n          </li>\n        ))}\n      </ul>\n      <button type=\"button\" className=\"view-more-button\" onClick={() => setIsWideView(!isWideView)}>\n        {isWideView ? (\n          <span>\n            <ArrowUp />\n            접기\n          </span>\n        ) : (\n          <span>\n            <ArrowDown />\n            더보기\n          </span>\n        )}\n      </button>\n    </TagNavWrapper>\n  );\n};\n\nconst wide = css`\n  height: 130px;\n  overflow-x: hidden;\n  overflow-y: scroll;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nconst narrow = css`\n  height: 40px;\n`;\n\nconst TagNavWrapper = styled.div<{ isWideView: boolean }>`\n  ${inner}\n\n  display: flex;\n  position: relative;\n  transition: height 0.5s ease-in-out;\n\n  ${({ isWideView }) => (isWideView ? wide : narrow)};\n  font-size: 13px;\n\n  & > .view-more-button {\n    margin-top: 5px;\n    min-width: 80px;\n    height: 30px;\n    background-color: rgba(0, 0, 0, 0);\n    color: ${colors.midgrey};\n\n    & span {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n  }\n\n  & > ul {\n    width: 100%;\n    display: flex;\n    flex-wrap: wrap;\n    padding: 0;\n  }\n\n  & li {\n    list-style: none;\n    display: inline-block;\n    border-radius: 20px;\n    padding: 2px 5px;\n    margin-left: 7px;\n\n    background-color: ${colors.midgrey};\n\n    & > a {\n      color: white;\n    }\n  }\n`;\n\nexport default TagNav;\n","import { css } from '@emotion/react';\nimport { graphql } from 'gatsby';\nimport { FixedObject } from 'gatsby-image';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Footer } from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport SiteNavBackground from '../components/header/SiteNavBackground';\nimport Pagination from '../components/Pagination';\nimport { PostCard } from '../components/PostCard';\nimport TagNav from '../components/TagNav';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  Posts,\n  SiteDescription,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n} from '../styles/shared';\nimport config from '../website-config';\nimport { PageContext } from './post';\n\nexport interface IndexProps {\n  pageContext: {\n    currentPage: number;\n    numPages: number;\n  };\n  data: {\n    logo: {\n      childImageSharp: {\n        fixed: FixedObject;\n      };\n    };\n    header: {\n      childImageSharp: {\n        fixed: FixedObject;\n      };\n    };\n    allMarkdownRemark: {\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst IndexPage: React.FC<IndexProps> = props => {\n  const { width, height } = props.data.header.childImageSharp.fixed;\n\n  return (\n    <IndexLayout css={HomePosts}>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>{config.title}</title>\n        <meta name=\"description\" content={config.description} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={config.title} />\n        <meta property=\"og:description\" content={config.description} />\n        <meta property=\"og:url\" content={config.siteUrl} />\n        <meta\n          property=\"og:image\"\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fixed.src}`}\n        />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        {config.googleSiteVerification && (\n          <meta name=\"google-site-verification\" content={config.googleSiteVerification} />\n        )}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={config.title} />\n        <meta name=\"twitter:description\" content={config.description} />\n        <meta name=\"twitter:url\" content={config.siteUrl} />\n        <meta\n          name=\"twitter:image\"\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fixed.src}`}\n        />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n        <meta property=\"og:image:width\" content={width.toString()} />\n        <meta property=\"og:image:height\" content={height.toString()} />\n      </Helmet>\n      <Wrapper>\n        <SiteNavBackground>\n          <div css={inner}>\n            <SiteNav isHome />\n            <SiteHeaderContent className=\"site-header-conent\">\n              <SiteTitle className=\"site-title\">\n                {props.data.logo ? (\n                  <img\n                    style={{ maxHeight: '55px' }}\n                    src={props.data.logo.childImageSharp.fixed.src}\n                    alt={config.title}\n                  />\n                ) : (\n                  config.title\n                )}\n              </SiteTitle>\n              <SiteDescription>{config.description}</SiteDescription>\n            </SiteHeaderContent>\n          </div>\n        </SiteNavBackground>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <TagNav className=\"tag-nav\" />\n          <div css={[inner, Posts]}>\n            <div css={[PostFeed]}>\n              {props.data.allMarkdownRemark.edges.map((post, index) => {\n                // filter out drafts in production\n                return (\n                  (post.node.frontmatter.draft !== true ||\n                    process.env.NODE_ENV !== 'production') && (\n                    <PostCard key={post.node.fields.slug} post={post.node} large={index === 0} />\n                  )\n                );\n              })}\n            </div>\n          </div>\n        </main>\n        {props.children}\n        {props.pageContext.numPages > 1 && (\n          <Pagination\n            currentPage={props.pageContext.currentPage}\n            numPages={props.pageContext.numPages}\n          />\n        )}\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    logo: file(relativePath: { eq: \"img/tecoble.png\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    header: file(relativePath: { eq: \"img/wooteco.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 2000, quality: 100) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { ne: true } } }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          timeToRead\n          excerpt(truncate: true)\n          frontmatter {\n            title\n            date\n            tags\n            draft\n            excerpt\n            image {\n              childImageSharp {\n                fluid(maxWidth: 3720) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            author {\n              id\n              bio\n              avatar {\n                children {\n                  ... on ImageSharp {\n                    fluid(quality: 100, srcSetBreakpoints: [40, 80, 120]) {\n                      ...GatsbyImageSharpFluid\n                    }\n                  }\n                }\n              }\n            }\n          }\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst HomePosts = css`\n  .tag-nav {\n    margin-top: 10px;\n  }\n\n  @media (min-width: 795px) {\n    .post-card-large {\n      flex: 1 1 100%;\n      flex-direction: row;\n      padding-bottom: 40px;\n      min-height: 280px;\n      border-top: 0;\n    }\n\n    .post-card-large .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-large:not(.no-image) .post-card-header {\n      margin-top: 0;\n    }\n\n    .post-card-large .post-card-image-link {\n      position: relative;\n      flex: 1 1 auto;\n      margin-bottom: 0;\n      min-height: 380px;\n    }\n\n    .post-card-large .post-card-image {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    .post-card-large .post-card-content {\n      flex: 0 1 361px;\n      justify-content: center;\n    }\n\n    .post-card-large .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-large .post-card-content-link {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-large .post-card-meta {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-large .post-card-excerpt p {\n      margin-bottom: 1.5em;\n      font-size: 1.8rem;\n      line-height: 1.5em;\n    }\n  }\n`;\n\nexport default IndexPage;\n"],"sourceRoot":""}