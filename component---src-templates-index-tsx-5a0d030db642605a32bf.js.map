{"version":3,"file":"component---src-templates-index-tsx-5a0d030db642605a32bf.js","mappings":"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","sources":["webpack://Tecoble/./src/components/header/SiteNavBackground.tsx","webpack://Tecoble/./src/components/Pagination.tsx","webpack://Tecoble/./src/components/icons/ArrowDown.tsx","webpack://Tecoble/./src/components/icons/ArrowUp.tsx","webpack://Tecoble/./src/components/TagNav.tsx","webpack://Tecoble/./src/templates/index.tsx"],"sourcesContent":["import { css } from '@emotion/react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport { getSrc } from 'gatsby-plugin-image';\nimport React, { type ReactNode, useEffect, useState } from 'react';\nimport { outer, SiteHeader, SiteHeaderStyles } from '../../styles/shared';\n\ntype SiteNavBackgroundProps = {\n  children: ReactNode;\n};\n\ntype SiteNavBackgroundQuery = {\n  allImage: {\n    edges: Array<{\n      node: any;\n    }>;\n  };\n};\n\nfunction SiteNavBackground({ children }: SiteNavBackgroundProps) {\n  const IMAGE_REMAINING_DURATION = 4000;\n  const {\n    allImage: { edges },\n  } = useStaticQuery<SiteNavBackgroundQuery>(graphql`\n    query navBackgroundQuery {\n      allImage: allFile(filter: { relativePath: { regex: \"/img/nav-background[0-9]+/i\" } }) {\n        edges {\n          node {\n            childImageSharp {\n              gatsbyImageData(width: 2000, quality: 100, layout: FIXED)\n            }\n          }\n        }\n      }\n    }\n  `);\n  const [imageUrls, setImageUrls] = useState<string[]>([]);\n\n  useEffect(() => {\n    const urls = edges.map(edge => getSrc(edge.node));\n\n    setImageUrls(urls);\n  }, [edges]);\n\n  useEffect(() => {\n    const intervalId = window.setInterval(() => {\n      const [firstImageUrl, ...restImageUrls] = imageUrls;\n\n      setImageUrls([...restImageUrls, firstImageUrl]);\n    }, IMAGE_REMAINING_DURATION);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [imageUrls]);\n\n  return (\n    <div css={[outer, SiteHeader, SiteHeaderStyles]} className=\"site-header-background\">\n      <div css={[backgroundImage]}>\n        {imageUrls.map(url => (\n          <div\n            key={url}\n            className=\"nav-background-image\"\n            css={css`\n              background-image: url(${url});\n            `}\n          />\n        ))}\n      </div>\n      {children}\n    </div>\n  );\n}\n\nconst backgroundImage = css`\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n\n  & > .nav-background-image {\n    transition: opacity 0.5s ease-in-out;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background-size: cover;\n    background-position: center;\n  }\n\n  & > .nav-background-image:first-child {\n    opacity: 1;\n  }\n\n  & > .nav-background-image:last-child {\n    opacity: 0;\n  }\n`;\n\nexport default SiteNavBackground;\n","import { Link } from 'gatsby';\nimport React from 'react';\nimport { darken } from 'polished';\nimport { css } from '@emotion/react';\n\nimport { colors } from '../styles/colors';\n\nexport type PaginationProps = {\n  currentPage: number;\n  numPages: number;\n};\n\nfunction Pagination({ currentPage, numPages }: PaginationProps) {\n  const isFirst = currentPage === 1;\n  const isLast = currentPage === numPages;\n  const prevPage = currentPage - 1 === 1 ? '/' : `../${(currentPage - 1).toString()}`;\n  const nextPage = `../${(currentPage + 1).toString()}`;\n\n  return (\n    <nav css={navCss}>\n      <div>\n        {!isFirst && (\n          <Link to={prevPage} rel=\"prev\">\n            {/* << symbol */}\n            {String.fromCharCode(171)}\n          </Link>\n        )}\n\n        {Array.from({ length: numPages }, (_, i) => (\n          <Link\n            key={`pagination-number${i + 1}`}\n            className={i + 1 === currentPage ? 'active' : ''}\n            to={`/${i === 0 ? '' : i + 1}`}\n          >\n            {i + 1}\n          </Link>\n        ))}\n\n        {!isLast && (\n          <Link to={nextPage} rel=\"next\">\n            {/* >> symbol */}\n            {String.fromCharCode(187)}\n          </Link>\n        )}\n      </div>\n    </nav>\n  );\n}\n\nconst navCss = css`\n  text-align: center;\n  div {\n    display: inline-block;\n  }\n\n  a {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell;\n    background: #fff;\n    color: black;\n    float: left;\n    padding: 8px 16px;\n    text-decoration: none;\n    transition: background-color 0.3s;\n    border: 1px solid #ddd;\n    margin: 0 4px;\n    box-shadow: rgba(39, 44, 49, 0.06) 8px 14px 38px, rgba(39, 44, 49, 0.03) 1px 3px 8px;\n    border-radius: 6px;\n    margin-bottom: 5px;\n    min-width: 50px;\n\n    &.active {\n      -webkit-box-shadow: inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n      -moz-box-shadow: inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n      box-shadow: inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n    }\n\n    &:hover:not(.active) {\n      background-color: #ddd;\n    }\n\n    &:hover {\n      text-decoration: none;\n    }\n  }\n`;\n\nexport default Pagination;\n","import React from 'react';\n\ntype Props = {\n  size?: string;\n};\n\nfunction ArrowDown({ size = '18px' }: Props) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height={size}\n      viewBox=\"0 0 24 24\"\n      width={size}\n      fill=\"#000000\"\n    >\n      <path d=\"M24 24H0V0h24v24z\" fill=\"none\" opacity=\".87\" />\n      <path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6-1.41-1.41z\" />\n    </svg>\n  );\n}\n\nexport default ArrowDown;\n","import React from 'react';\n\ntype Props = {\n  size?: string;\n};\n\nfunction ArrowUp({ size = '18px' }: Props) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height={size}\n      viewBox=\"0 0 24 24\"\n      width={size}\n      fill=\"#000000\"\n    >\n      <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n      <path d=\"M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14l-6-6z\" />\n    </svg>\n  );\n}\n\nexport default ArrowUp;\n","import { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { graphql, Link, useStaticQuery } from 'gatsby';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { colors } from '../styles/colors';\nimport { inner } from '../styles/shared';\nimport ArrowDown from './icons/ArrowDown';\nimport ArrowUp from './icons/ArrowUp';\n\ntype TagNavQuery = {\n  allMarkdownRemark: {\n    edges: Array<{\n      node: {\n        frontmatter: {\n          tags: string[];\n        };\n      };\n    }>;\n  };\n};\n\ntype Tag = {\n  name: string;\n  count: number;\n};\n\ntype Props = {\n  className?: string;\n};\n\nfunction TagNav({ className }: Props) {\n  const {\n    allMarkdownRemark: { edges },\n  } = useStaticQuery<TagNavQuery>(graphql`\n    query TagNavQuery {\n      allMarkdownRemark {\n        edges {\n          node {\n            frontmatter {\n              tags\n            }\n          }\n        }\n      }\n    }\n  `);\n  const [tags, setTags] = useState<Tag[]>([]);\n  const [isWideView, setIsWideView] = useState(false);\n\n  useEffect(() => {\n    if (!edges) {\n      return;\n    }\n\n    const tagNameMap: Record<string, Tag> = {};\n\n    edges.forEach(edge => {\n      edge.node.frontmatter.tags.forEach(tag => {\n        const tagName = _.kebabCase(tag);\n\n        if (!tagNameMap[tagName]) {\n          tagNameMap[tagName] = {\n            name: tagName,\n            count: 1,\n          };\n          return;\n        }\n\n        tagNameMap[tagName].count += 1;\n      });\n    });\n\n    const sortedTags = Object.values(tagNameMap).sort(({ name: aTagName }, { name: bTagName }) =>\n      aTagName.toUpperCase() >= bTagName.toUpperCase() ? 1 : -1,\n    );\n\n    setTags(sortedTags);\n  }, []);\n\n  return (\n    <TagNavWrapper className={className} isWideView={isWideView}>\n      <ul>\n        {tags.map(tag => (\n          <li key={tag.name}>\n            <Link to={`/tags/${tag.name}`}>{`#${tag.name} (${tag.count})`}</Link>\n          </li>\n        ))}\n      </ul>\n      <button type=\"button\" className=\"view-more-button\" onClick={() => setIsWideView(!isWideView)}>\n        {isWideView ? (\n          <span>\n            <ArrowUp />\n            접기\n          </span>\n        ) : (\n          <span>\n            <ArrowDown />\n            더보기\n          </span>\n        )}\n      </button>\n    </TagNavWrapper>\n  );\n}\n\nconst wide = css`\n  height: 130px;\n  overflow-x: hidden;\n  overflow-y: scroll;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nconst narrow = css`\n  height: 40px;\n`;\n\nconst TagNavWrapper = styled.div<{ isWideView: boolean }>`\n  ${inner}\n\n  display: flex;\n  position: relative;\n  transition: height 0.5s ease-in-out;\n\n  ${({ isWideView }) => (isWideView ? wide : narrow)};\n  font-size: 13px;\n\n  & > .view-more-button {\n    margin-top: 5px;\n    min-width: 80px;\n    height: 30px;\n    background-color: rgba(0, 0, 0, 0);\n    color: ${colors.midgrey};\n\n    & span {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n  }\n\n  & > ul {\n    width: 100%;\n    display: flex;\n    flex-wrap: wrap;\n    padding: 0;\n  }\n\n  & li {\n    list-style: none;\n    display: inline-block;\n    border-radius: 20px;\n    padding: 2px 5px;\n    margin-left: 7px;\n\n    background-color: ${colors.midgrey};\n\n    & > a {\n      color: white;\n    }\n  }\n`;\n\nexport default TagNav;\n","import { css } from '@emotion/react';\nimport { graphql } from 'gatsby';\nimport { getSrc, getImage } from 'gatsby-plugin-image';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Footer } from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport SiteNavBackground from '../components/header/SiteNavBackground';\nimport Pagination from '../components/Pagination';\nimport { PostCard } from '../components/PostCard';\nimport TagNav from '../components/TagNav';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  Posts,\n  SiteDescription,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n} from '../styles/shared';\nimport config from '../website-config';\nimport type { PageContext } from './post';\n\nexport type IndexProps = {\n  children: React.ReactNode;\n  pageContext: {\n    currentPage: number;\n    numPages: number;\n  };\n  data: {\n    logo: any;\n    header: any;\n    allMarkdownRemark: {\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n};\n\nfunction IndexPage(props: IndexProps) {\n  const width = getImage(props.data.header)?.width;\n  const height = getImage(props.data.header)?.height;\n\n  return (\n    <IndexLayout css={HomePosts}>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>{config.title}</title>\n        <meta name=\"description\" content={config.description} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={config.title} />\n        <meta property=\"og:description\" content={config.description} />\n        <meta property=\"og:url\" content={config.siteUrl} />\n        <meta property=\"og:image\" content={`${config.siteUrl}${getSrc(props.data.header)}`} />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        {config.googleSiteVerification && (\n          <meta name=\"google-site-verification\" content={config.googleSiteVerification} />\n        )}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={config.title} />\n        <meta name=\"twitter:description\" content={config.description} />\n        <meta name=\"twitter:url\" content={config.siteUrl} />\n        <meta name=\"twitter:image\" content={`${config.siteUrl}${getSrc(props.data.header)}`} />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n        <meta property=\"og:image:width\" content={width?.toString()} />\n        <meta property=\"og:image:height\" content={height?.toString()} />\n      </Helmet>\n      <Wrapper>\n        <SiteNavBackground>\n          <div css={inner}>\n            <SiteNav isHome />\n            <SiteHeaderContent className=\"site-header-content\">\n              <SiteTitle className=\"site-title\">\n                {props.data.logo ? (\n                  <img\n                    style={{ maxHeight: '55px' }}\n                    src={getSrc(props.data.logo)}\n                    alt={config.title}\n                  />\n                ) : (\n                  config.title\n                )}\n              </SiteTitle>\n              <SiteDescription>{config.description}</SiteDescription>\n            </SiteHeaderContent>\n          </div>\n        </SiteNavBackground>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <TagNav className=\"tag-nav\" />\n          <div css={[inner, Posts]}>\n            <div css={[PostFeed]}>\n              {props.data.allMarkdownRemark.edges.map(\n                (post, index) =>\n                  // filter out drafts in production\n                  (post.node.frontmatter.draft !== true ||\n                    process.env.NODE_ENV !== 'production') && (\n                    <PostCard key={post.node.fields.slug} post={post.node} isLarge={index === 0} />\n                  ),\n              )}\n            </div>\n          </div>\n        </main>\n        {props.children}\n        {props.pageContext.numPages > 1 && (\n          <Pagination\n            currentPage={props.pageContext.currentPage}\n            numPages={props.pageContext.numPages}\n          />\n        )}\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    logo: file(relativePath: { eq: \"img/tecoble.png\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED)\n      }\n    }\n    header: file(relativePath: { eq: \"img/wooteco.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(width: 2000, quality: 100, layout: FIXED, formats: [AUTO, WEBP, AVIF])\n      }\n    }\n    allMarkdownRemark(\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { draft: { ne: true } } }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          timeToRead\n          excerpt(truncate: true)\n          frontmatter {\n            title\n            date\n            tags\n            draft\n            excerpt\n            image {\n              childImageSharp {\n                gatsbyImageData(layout: FULL_WIDTH, formats: [AUTO, WEBP, AVIF])\n              }\n            }\n            author {\n              name\n              bio\n              avatar {\n                childImageSharp {\n                  gatsbyImageData(layout: FULL_WIDTH, breakpoints: [40, 80, 120])\n                }\n              }\n            }\n          }\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst HomePosts = css`\n  .tag-nav {\n    margin-top: 10px;\n  }\n\n  @media (min-width: 795px) {\n    .post-card-large {\n      flex: 1 1 100%;\n      flex-direction: row;\n      padding-bottom: 40px;\n      min-height: 280px;\n      border-top: 0;\n    }\n\n    .post-card-large .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-large:not(.no-image) .post-card-header {\n      margin-top: 0;\n    }\n\n    .post-card-large .post-card-image-link {\n      position: relative;\n      flex: 1 1 auto;\n      margin-bottom: 0;\n      min-height: 380px;\n    }\n\n    .post-card-large .post-card-image {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    .post-card-large .post-card-content {\n      flex: 0 1 361px;\n      justify-content: center;\n    }\n\n    .post-card-large .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-large .post-card-content-link {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-large .post-card-meta {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-large .post-card-excerpt p {\n      margin-bottom: 1.5em;\n      font-size: 1.8rem;\n      line-height: 1.5em;\n    }\n  }\n`;\n\nexport default IndexPage;\n"],"names":["backgroundImage","name","styles","children","allImage","edges","useStaticQuery","imageUrls","setImageUrls","useState","useEffect","urls","map","edge","getSrc","node","intervalId","window","setInterval","firstImageUrl","restImageUrls","concat","_toConsumableArray","clearInterval","___EmotionJSX","css","outer","SiteHeader","SiteHeaderStyles","className","url","key","navCss","darken","colors","darkgrey","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","Link","to","rel","String","fromCharCode","Array","from","length","_","i","size","xmlns","height","viewBox","width","fill","d","opacity","wide","narrow","TagNavWrapper","_styled","target","inner","isWideView","midgrey","allMarkdownRemark","tags","setTags","setIsWideView","tagNameMap","forEach","frontmatter","tag","tagName","_kebabCase","count","sortedTags","Object","values","sort","aTagName","bTagName","toUpperCase","type","onClick","ArrowUp","ArrowDown","HomePosts","props","_getImage","_getImage2","getImage","data","header","IndexLayout","Helmet","lang","config","title","content","description","property","siteUrl","facebook","googleSiteVerification","twitter","split","Wrapper","SiteNavBackground","SiteNav","isHome","SiteHeaderContent","SiteTitle","logo","style","maxHeight","src","alt","SiteDescription","id","SiteMain","TagNav","Posts","PostFeed","post","index","draft","PostCard","fields","slug","isLarge","pageContext","Pagination","Footer"],"sourceRoot":""}